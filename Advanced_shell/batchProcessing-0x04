#!/bin/bash

# Directory for storing data files
DIRECTORY="Advanced_shell"
mkdir -p "$DIRECTORY"

# List of Pokémon to fetch
POKEMON_LIST=("Bulbasaur" "Ivysaur" "Venusaur" "Charmander" "Charmeleon")

# Base API URL
API_BASE_URL="https://pokeapi.co/api/v2/pokemon"

# Max retries
MAX_RETRIES=3

# Function to fetch Pokémon data
fetch_pokemon_data() {
  POKEMON=$1
  POKEMON_LOWER=$(echo "$POKEMON" | tr '[:upper:]' '[:lower:]')  # Convert Pokémon name to lowercase
  DATA_FILE="$DIRECTORY/${POKEMON_LOWER}.json"

  RETRIES=0

  # Retry mechanism
  until [[ $RETRIES -ge $MAX_RETRIES ]]; do
    RESPONSE=$(curl -s -w "%{http_code}" -o "$DATA_FILE" "$API_BASE_URL/$POKEMON_LOWER")
    HTTP_STATUS="${RESPONSE: -3}"

    if [[ "$HTTP_STATUS" -eq 200 ]]; then
      echo "Data for $POKEMON saved to $DATA_FILE."
      return 0  # Success
    fi

    echo "Attempt $(($RETRIES + 1)) failed for $POKEMON. HTTP Status: $HTTP_STATUS"
    ((RETRIES++))
    sleep 2
  done

  echo "Failed to fetch data for $POKEMON after $MAX_RETRIES attempts."
  echo "$POKEMON: Failed after $MAX_RETRIES attempts" >> "$DIRECTORY/errors.txt"
  rm -f "$DATA_FILE"  # Remove incomplete file
}

# Main script execution
echo "Starting parallel data retrieval..."

# Start fetching data for each Pokémon in the background
for POKEMON in "${POKEMON_LIST[@]}"; do
  fetch_pokemon_data "$POKEMON" &
done

# Wait for all background processes to complete
wait

echo "Parallel data retrieval complete."
